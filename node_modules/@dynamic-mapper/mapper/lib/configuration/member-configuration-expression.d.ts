import { ConditionExpression, IAutoMemberConfigurationExpression, IPropertyMapConfiguration, MemberInfo, ValueTransformer } from '../interface';
import { TypeMap } from '../type-map';
import { MappingPair } from '../mapping-pair';
export declare class MemberConfigurationExpression<TSource, TDestination, TMember> implements IAutoMemberConfigurationExpression<TSource, TDestination, TMember>, IPropertyMapConfiguration {
    readonly destinationMember: MemberInfo;
    private sourceMember;
    private readonly propertyMapActions;
    constructor(destinationMember: MemberInfo);
    configure(typeMap: TypeMap): void;
    mapFrom(mappingFunction: (source: TSource) => TMember): this;
    mapFromUsing<TSourceMember>(mappingFunction: (source: TSource) => TSourceMember, pair: MappingPair<TSourceMember extends Array<any> ? TSourceMember[0] : TSourceMember, TMember extends Array<any> ? TMember[0] : TMember>): this;
    addTransform(transformer: ValueTransformer<TMember>): this;
    condition(condition: ConditionExpression<TSource, TDestination>): this;
    preCondition(condition: ConditionExpression<TSource, TDestination>): this;
    nullSubstitute(nullSubstitute: ((src: TSource) => TMember) | TMember): this;
    ignore(): void;
    auto(): this;
    private apply;
}
