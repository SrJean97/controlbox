import { IPropertyMapConfiguration, ITypeMapConfiguration, MapperFunction, MappingFunction, Type, ValueTransformer } from '../interface';
import { IMappingExpression, IMappingExpressionBase, ISourceMemberConfiguration } from './interface';
import { MappingPair } from '../mapping-pair';
import { TypeMap } from '../type-map';
import { MemberConfigurationExpression } from './member-configuration-expression';
export declare abstract class MappingExpressionBase<TSource, TDestination> implements ITypeMapConfiguration, IMappingExpression<TSource, TDestination>, IMappingExpressionBase<TSource, TDestination> {
    readonly types: MappingPair<TSource, TDestination>;
    readonly sourceType: Type<TSource> | null;
    readonly destinationType: Type<TDestination> | null;
    readonly valueTransformers: ValueTransformer[];
    protected readonly memberConfigurations: IPropertyMapConfiguration[];
    protected readonly sourceMemberConfigurations: ISourceMemberConfiguration[];
    protected readonly typeMapActions: ((tm: TypeMap) => void)[];
    constructor(types: MappingPair<TSource, TDestination>);
    configure(typeMap: TypeMap): void;
    abstract forMember<Member extends keyof TDestination>(destinationMember: Member, memberOptions: (expression: MemberConfigurationExpression<TSource, TDestination, TDestination[Member]>) => void, auto?: boolean): this;
    addTransform<TValue>(transformer: (value: TValue) => TValue): this;
    convertUsing(mappingFunction: MapperFunction<TSource, TDestination>): void;
    constructUsing(mappingFunction: MappingFunction<TSource, Partial<TDestination>>): this;
    includeBase(pair: MappingPair<any, any>): this;
    include<TDerivedSource extends TSource, TDerivedDestination extends TDestination>(pair: MappingPair<TDerivedSource, TDerivedDestination>): this;
    mapSubtype(pair: MappingPair<TSource, TDestination>, discriminatorCondition: (source: TSource) => boolean): this;
    beforeMap(mapper: MapperFunction<TSource, TDestination, any>): this;
    afterMap(mapper: MapperFunction<TSource, TDestination, any>): this;
}
