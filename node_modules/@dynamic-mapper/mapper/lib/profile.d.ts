import { AutoMappableProperties, ExplicitProperties, IMemberConfigurationExpression, IProfileExpression, ITypeMapConfiguration, MappingMembers, NormalizeIntersection, ValueTransformer } from './interface';
import { IAutoMappingExpression, IMappingExpression, IProfileConfiguration } from './configuration/interface';
import { MappingPair } from './mapping-pair';
export declare abstract class Profile implements IProfileExpression, IProfileConfiguration {
    readonly typeMapConfigs: ITypeMapConfiguration[];
    readonly valueTransformers: ValueTransformer[];
    profileName: string;
    createAutoMap<TSource, TDestination>(pair: MappingPair<TSource, TDestination>, members: NormalizeIntersection<Partial<AutoMappableProperties<TSource, TDestination>> & Required<ExplicitProperties<TSource, TDestination>>>): IAutoMappingExpression<TSource, TDestination>;
    createMap<TSource, TDestination>(pair: MappingPair<TSource, TDestination>, config?: Partial<MappingMembers<TSource, TDestination>>): IMappingExpression<TSource, TDestination>;
    createStrictMap<TSource, TDestination>(pair: MappingPair<TSource, TDestination>, config: Required<MappingMembers<TSource, TDestination>>, allMemberConfig?: (opt: IMemberConfigurationExpression<TSource, TDestination, any>) => void): IMappingExpression<TSource, TDestination>;
    private configureMappingExpression;
}
