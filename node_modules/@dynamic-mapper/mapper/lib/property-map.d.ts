import { ConditionExpression, IMemberMap, MappingFunction, MemberInfo, ValueTransformer } from './interface';
import { MappingPair } from './mapping-pair';
import { TypeMap } from './type-map';
export declare class PropertyMap implements IMemberMap {
    readonly destinationMember: MemberInfo;
    readonly typeMap?: TypeMap | undefined;
    private _memberChain;
    condition: ConditionExpression;
    precondition: ConditionExpression;
    customMappingFunction: MappingFunction;
    nullSubstitute: any;
    ignored: boolean;
    pair: MappingPair<any, any> | undefined;
    get sourceMembers(): ReadonlyArray<MemberInfo>;
    get valueTransformers(): ReadonlyArray<ValueTransformer<any>>;
    get isMapped(): boolean;
    get canResolveValue(): boolean;
    get isResolveConfigured(): boolean;
    private readonly _valueTransformers;
    constructor(destinationMember: MemberInfo, typeMap?: TypeMap | undefined, inheritedMappedProperty?: PropertyMap);
    chainMembers(members: MemberInfo[]): void;
    mapFrom(mappingFunction: MappingFunction): void;
    mapFromUsing(mappingFunction: MappingFunction, pair: MappingPair<any, any>): void;
    addValueTransformation(transformer: ValueTransformer<any>): void;
    applyInheritedPropertyMap(inheritedMappedProperty: PropertyMap): void;
}
