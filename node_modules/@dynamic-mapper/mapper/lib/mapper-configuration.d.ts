import { IConfigurationProvider, MapperFunction } from './interface';
import { MappingPair } from './mapping-pair';
import { TypeMap } from './type-map';
import { MapperConfigurationExpression } from './configuration/mapper-configuration-expression';
import { Mapper } from './mapper';
export declare class MapperConfiguration implements IConfigurationProvider {
    private readonly mapConfigs;
    private readonly typeMapRegistry;
    private readonly _profiles;
    constructor(configure: (expression: MapperConfigurationExpression) => any);
    createMapper(): Mapper;
    registerTypeMap(typeMap: TypeMap): void;
    findTypeMapFor(pair: MappingPair<any, any>): TypeMap | undefined;
    getIncludedTypeMaps(includedTypes: ReadonlySet<MappingPair<any, any>>): ReadonlyArray<TypeMap>;
    getMapperFunction<TSource, TDestination>(pair: MappingPair<TSource, TDestination>): MapperFunction<TSource, TDestination>;
    private seal;
    getAllTypeMaps(): ReadonlyArray<TypeMap>;
}
